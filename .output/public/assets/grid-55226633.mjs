function I(S){let{swiper:o,extendParams:x}=S;x({grid:{rows:1,fill:"column"}});let c,m,w;const g=e=>{const{slidesPerView:r}=o.params,{rows:l,fill:u}=o.params.grid;m=c/l,w=Math.floor(e/l),Math.floor(e/l)===e/l?c=e:c=Math.ceil(e/l)*l,r!=="auto"&&u==="row"&&(c=Math.max(c,r*l))},v=(e,r,l,u)=>{const{slidesPerGroup:a,spaceBetween:d}=o.params,{rows:s,fill:f}=o.params.grid;let n,t,i;if(f==="row"&&a>1){const p=Math.floor(e/(a*s)),h=e-s*a*p,M=p===0?a:Math.min(Math.ceil((l-p*s*a)/s),a);i=Math.floor(h/M),t=h-i*M+p*a,n=t+i*c/s,r.css({"-webkit-order":n,order:n})}else f==="column"?(t=Math.floor(e/s),i=e-t*s,(t>w||t===w&&i===s-1)&&(i+=1,i>=s&&(i=0,t+=1))):(i=Math.floor(e/m),t=e-i*m);r.css(u("margin-top"),i!==0?d&&`${d}px`:"")},z=(e,r,l)=>{const{spaceBetween:u,centeredSlides:a,roundLengths:d}=o.params,{rows:s}=o.params.grid;if(o.virtualSize=(e+u)*c,o.virtualSize=Math.ceil(o.virtualSize/s)-u,o.$wrapperEl.css({[l("width")]:`${o.virtualSize+u}px`}),a){r.splice(0,r.length);const f=[];for(let n=0;n<r.length;n+=1){let t=r[n];d&&(t=Math.floor(t)),r[n]<o.virtualSize+r[0]&&f.push(t)}r.push(...f)}};o.grid={initSlides:g,updateSlide:v,updateWrapperSize:z}}export{I as G};
